#include <stdio.h>
#include <cs50.h>
#include <string.h>

// Program to create a ciphertext when provided with 26 character key as command line argument
int main(int argc, string argv[])
{
    int x = 0;
    int y = 0;
    if (argc == 2)
    {
        // Test to see if too short (i.e. not 26 characters)
        for (int i = 0; i < 26; i++)
        {
            if (argv[1][i] == '\0')
            {
                x = 1;
            }
        }
        // Test to see if too long
        if (x == 0 && argv[1][26] != '\0')
        {
            x = 2;
        }
        // Test to verify only letters given
        for (int i = 0; i < 26; i++)
        {
            if ((argv[1][i] >= 'a' && argv[1][i] <= 'z') || (argv[1][i] >= 'A' && argv[1][i] <= 'Z'))
            {
                x = 3;
            }
            else
            {
                y = 1;
            }
        }
        // Test to ensure each letter used only once
        for (int i = 0; i < 25; i++)
        {
            for (int a = i + 1; a < 26; a++)
            {
                if (argv[1][i] == argv[1][a] || argv[1][i] == argv[1][a] + 32 || argv[1][i] == argv[1][a] - 32)
                {
                    x = 4;
                }
            }
        }
            
    }
    else if (argc != 2)
    {
        printf("Usage: ./substitution key\n");
        return 1;
    }
    //After correct length and character type verified, go here (x == 3)
    if (x == 3 && y == 0)
    {
        // Convert argv[] into cipher key
        for (int i = 0; i < 26; i++)
        {
            if (argv[1][i] >= 'a' && argv[1][i] <= 'z')
            {
                argv[1][i] = argv[1][i] - (97 + i);
            }
            else if (argv[1][i] >= 'A' && argv[1][i] <= 'Z')
            {
                argv[1][i] = argv[1][i] - (65 + i);
            }
        }
        // Get plaintext, then convert it to ciphertext using key
        string PT = get_string("plaintext:");
        printf("ciphertext:");
        for (int i = 0, n = strlen(PT); i < n; i++)
        {
            if (PT[i] >= 'a' && PT[i] <= 'z')
            {
                PT[i] = PT[i] + argv[1][(PT[i] - 97)];
                printf("%c", PT[i]);
            }
            else if (PT[i] >= 'A' && PT[i] <= 'Z')
            {
                PT[i] = PT[i] + argv[1][(PT[i] - 65)];
                printf("%c", PT[i]);
            }
            else
            {
                printf("%c", PT[i]);
            }
        }
        printf("\n");
        return 0;
    }
    // If invalid command line arguement provided, perform below
    if (x == 1)
    {
        printf("Not enough characters. Key must contain 26 characters.\n");
        return 1;
    }
    else if (x == 2)
    {
        printf("Too many characters. Key must contain 26 characters.\n");
        return 1;
    }
    else if (y == 1)
    {
        printf("Key must contain letters only.\n");
        return 1;
    }
    else if (x == 4)
    {
        printf("Key must not have any repeat characters.\n");
        return 1;
    }
}
